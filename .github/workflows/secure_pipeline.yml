name: DevSecOps Security Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies and Tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run Flake8 Linter
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run Bandit Security Scan
        run: |
          bandit -r . -f json -o bandit-report.json || echo '{"results": []}' > bandit-report.json
        continue-on-error: true

      - name: Run Safety Dependency Scan
        run: |
          safety check -r requirements.txt -f json > safety-report.json || echo '{"vulnerabilities": []}' > safety-report.json
        continue-on-error: true

      - name: Fail on Critical Vulnerabilities
        run: |
          CRITICAL_SAFETY=$(jq '[.vulnerabilities[] | select(.severity=="high" or .severity=="critical")] | length' safety-report.json)
          CRITICAL_BANDIT=$(jq '[.results[] | select(.issue_severity=="HIGH" or .issue_severity=="CRITICAL")] | length' bandit-report.json)

          echo "Critical Bandit Issues: $CRITICAL_BANDIT"
          echo "Critical Safety Vulnerabilities: $CRITICAL_SAFETY"

          if [ "$CRITICAL_BANDIT" -gt 0 ] || [ "$CRITICAL_SAFETY" -gt 0 ]; then
            echo "Critical vulnerabilities found. Failing the build."
            exit 1
          fi

      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  docker_scan:
    name: Docker Security Scanning
    runs-on: ubuntu-latest
    needs: security_scan  # Waits for security_scan to complete

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Run Docker Scout Analysis
        run: |
          docker scout quickview your-dockerhub-username/your-docker-image:latest --format json > docker-scout-report.json || echo '{"issues": []}' > docker-scout-report.json
        continue-on-error: true

      - name: Upload Docker Scout Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-scout-report
          path: docker-scout-report.json

      - name: Fail on Critical Docker Issues
        run: |
          CRITICAL_SCOUT=$(jq '[.issues[] | select(.severity=="high" or .severity=="critical")] | length' docker-scout-report.json)

          echo "Critical Docker Scout Issues: $CRITICAL_SCOUT"

          if [ "$CRITICAL_SCOUT" -gt 0 ]; then
            echo "Critical vulnerabilities found in Docker image. Failing the build."
            exit 1
          fi

  ai_fix_suggestions:
    name: AI Fix Suggestions
    runs-on: ubuntu-latest
    needs: [security_scan, docker_scan]  # Ensures all scans are completed before running AI Fixer

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download Security Reports
        uses: actions/download-artifact@v4
        with:
          name: security-reports

      - name: Download Docker Scout Report
        uses: actions/download-artifact@v4
        with:
          name: docker-scout-report

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python Dependencies
        run: pip install requests PyGithub

      - name: Run AI Fixer Script
        run: python scripts/ai_fixer.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
