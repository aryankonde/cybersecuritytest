name: DevSecOps Security Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies and Tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install and Run Flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run Bandit Security Scan
        run: |
          bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Safety Dependency Scan
        run: |
          safety check -r requirements.txt -f json > safety-report.json || echo '{"vulnerabilities": []}' > safety-report.json
        continue-on-error: true

      - name: Fail on Critical Vulnerabilities
        run: |
          CRITICAL_SAFETY=$(jq '[.vulnerabilities[] | select(.severity=="high" or .severity=="critical")] | length' safety-report.json)
          CRITICAL_BANDIT=$(jq '[.results[] | select(.issue_severity=="HIGH" or .issue_severity=="CRITICAL")] | length' bandit-report.json)

          echo "Critical Bandit Issues: $CRITICAL_BANDIT"
          echo "Critical Safety Vulnerabilities: $CRITICAL_SAFETY"

          if [ "$CRITICAL_BANDIT" -gt 0 ] || [ "$CRITICAL_SAFETY" -gt 0 ]; then
            echo "Critical vulnerabilities found. Failing the build."
            exit 1
          fi

      - name: Upload Bandit Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Upload Safety Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Run Docker Scout Analysis
        run: |
          docker scout quickview your-dockerhub-username/your-docker-image:latest --format json > docker-scout-report.json || echo '{"issues": []}' > docker-scout-report.json
        continue-on-error: true

      - name: Upload Docker Scout Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-scout-report
          path: docker-scout-report.json

      - name: Fail on Critical Docker Issues
        run: |
          CRITICAL_SCOUT=$(jq '[.issues[] | select(.severity=="high" or .severity=="critical")] | length' docker-scout-report.json)

          echo "Critical Docker Scout Issues: $CRITICAL_SCOUT"

          if [ "$CRITICAL_SCOUT" -gt 0 ]; then
            echo "Critical vulnerabilities found in Docker image. Failing the build."
            exit 1
          fi

      - name: Generate and Post Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const banditReportPath = 'bandit-report.json';
            const safetyReportPath = 'safety-report.json';
            const dockerScoutPath = 'docker-scout-report.json';

            const parseJson = (path) => {
              if (fs.existsSync(path)) {
                const data = fs.readFileSync(path, 'utf8');
                try {
                  return JSON.parse(data);
                } catch (error) {
                  console.error(`Error parsing ${path}:`, error);
                  return null;
                }
              }
              return null;
            };

            let banditReport = parseJson(banditReportPath) || { results: [] };
            let safetyReport = parseJson(safetyReportPath) || { vulnerabilities: [] };
            let dockerScoutReport = parseJson(dockerScoutPath) || { issues: [] };

            let summary = "## Security Scan Report\n\n";

            summary += `### Bandit Findings: ${banditReport.results.length} issue(s) found\n\n`;
            if (banditReport.results.length > 0) {
              summary += "| Severity | Issue | File | Line |\n| --- | --- | --- | --- |\n";
              banditReport.results.forEach(issue => {
                const severity = issue.issue_severity || 'UNKNOWN';
                const issueText = (issue.issue_text || '').replace(/\|/g, '\\|');
                const filePath = issue.path || 'N/A';
                const lineNumber = issue.line_number || 'N/A';
                summary += `| ${severity} | ${issueText} | ${filePath} | ${lineNumber} |\n`;
              });
            } else {
              summary += "No issues found by Bandit.\n";
            }

            summary += `\n### Safety Dependency Findings: ${safetyReport.vulnerabilities.length} vulnerability(ies) found\n\n`;
            if (safetyReport.vulnerabilities.length > 0) {
              summary += "| Package | Vulnerability | Severity |\n| --- | --- | --- |\n";
              safetyReport.vulnerabilities.forEach(vuln => {
                const vulnDescription = (vuln.vulnerability || '').replace(/\|/g, '\\|');
                const packageName = vuln.package || 'N/A';
                const severity = vuln.severity || 'N/A';
                summary += `| ${packageName} | ${vulnDescription} | ${severity} |\n`;
              });
            } else {
              summary += "No vulnerabilities found by Safety.\n";
            }

            summary += `\n### Docker Scout Findings: ${dockerScoutReport.issues.length} issue(s) found\n\n`;
            if (dockerScoutReport.issues.length > 0) {
              summary += "| Severity | Issue |\n| --- | --- |\n";
              dockerScoutReport.issues.forEach(issue => {
                summary += `| ${issue.severity} | ${issue.description.replace(/\|/g, '\\|')} |\n`;
              });
            } else {
              summary += "No issues found by Docker Scout.\n";
            }

            const pr = context.payload.pull_request;
            const issue_number = pr.number;
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: issue_number,
              body: summary
            });

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
